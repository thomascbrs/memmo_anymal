# Generated by Haxe 4.0.5
# coding: utf-8
import sys

import math as python_lib_Math
import math as Math
import functools as python_lib_Functools
import re as python_lib_Re
from io import StringIO as python_lib_io_StringIO


class _hx_AnonObject:
    _hx_disable_getattr = False

    def __init__(self, fields):
        self.__dict__ = fields

    def __repr__(self):
        return repr(self.__dict__)

    def __getattr__(self, name):
        if (self._hx_disable_getattr):
            raise AttributeError('field does not exist')
        else:
            return None

    def _hx_hasattr(self, field):
        self._hx_disable_getattr = True
        try:
            getattr(self, field)
            self._hx_disable_getattr = False
            return True
        except AttributeError:
            self._hx_disable_getattr = False
            return False


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self, tag, index, params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            return self.tag + '(' + (', '.join(str(v) for v in self.params)) + ')'


class EReg:
    _hx_class_name = "EReg"
    __slots__ = ("pattern", "matchObj", "_hx_global")
    _hx_fields = ["pattern", "matchObj", "global"]
    _hx_methods = ["split"]

    def __init__(self, r, opt):
        self.matchObj = None
        self._hx_global = False
        options = 0
        _g = 0
        _g1 = len(opt)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = (-1 if ((i >= len(opt))) else ord(opt[i]))
            if (c == 109):
                options = (options | python_lib_Re.M)
            if (c == 105):
                options = (options | python_lib_Re.I)
            if (c == 115):
                options = (options | python_lib_Re.S)
            if (c == 117):
                options = (options | python_lib_Re.U)
            if (c == 103):
                self._hx_global = True
        self.pattern = python_lib_Re.compile(r, options)

    def split(self, s):
        if self._hx_global:
            ret = []
            lastEnd = 0
            x = python_HaxeIterator(python_lib_Re.finditer(self.pattern, s))
            while x.hasNext():
                x1 = x.next()
                x2 = HxString.substring(s, lastEnd, x1.start())
                ret.append(x2)
                lastEnd = x1.end()
            x3 = HxString.substr(s, lastEnd, None)
            ret.append(x3)
            return ret
        else:
            self.matchObj = python_lib_Re.search(self.pattern, s)
            if (self.matchObj is None):
                return [s]
            else:
                return [HxString.substring(s, 0, self.matchObj.start()), HxString.substr(s, self.matchObj.end(), None)]


class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field"]

    @staticmethod
    def field(o, field):
        return python_Boot.field(o, field)


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["string", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def string(s):
        return python_Boot.toString1(s, "")

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g = 0
        _g1 = len(x)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c, 0)
            if (_g2 is None):
                break
            else:
                _g3 = _g2
                if (((((((((((_g3 == 57) or ((_g3 == 56))) or ((_g3 == 55))) or ((_g3 == 54))) or ((_g3 == 53))) or
                         ((_g3 == 52))) or ((_g3 == 51))) or ((_g3 == 50))) or ((_g3 == 49))) or ((_g3 == 48)))
                        or ((_g3 == 46))):
                    r = (("null" if r is None else r) + ("null" if c is None else c))
                else:
                    break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e
            e = _hx_e1
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self, it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has


class haxe_ds_IntMap:
    _hx_class_name = "haxe.ds.IntMap"
    __slots__ = ("h", )
    _hx_fields = ["h"]
    _hx_methods = ["set", "keys"]

    def __init__(self):
        self.h = dict()

    def set(self, key, value):
        self.h[key] = value

    def keys(self):
        return python_HaxeIterator(iter(self.h.keys()))


class hxGeomAlgo_Debug:
    _hx_class_name = "hxGeomAlgo.Debug"
    __slots__ = ()
    _hx_statics = ["assert"]

    @staticmethod
    def _hx_assert(cond, message=None, pos=None):
        return


class hxGeomAlgo_HomogCoord:
    _hx_class_name = "hxGeomAlgo.HomogCoord"
    __slots__ = ("x", "y", "w")
    _hx_fields = ["x", "y", "w"]
    _hx_methods = [
        "add", "sub", "neg", "mul", "div", "normalize", "lengthSquared", "length", "perp", "dotPoint", "dot",
        "perpdot", "dotperp", "equals", "left", "right", "toScreen", "toPoint", "meet", "meetPoint", "toString"
    ]
    _hx_statics = ["INFINITY", "det", "ccw", "cw"]

    def __init__(self, x=None, y=None, w=None):
        if (x is None):
            x = 0
        if (y is None):
            y = 0
        if (w is None):
            w = 1
        self.x = x
        self.y = y
        self.w = w

    def add(self, p):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.x
        _hx_local_0.x = (_hx_local_1 + p.x)
        _hx_local_0.x
        _hx_local_2 = self
        _hx_local_3 = _hx_local_2.y
        _hx_local_2.y = (_hx_local_3 + p.y)
        _hx_local_2.y
        return self

    def sub(self, p):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.x
        _hx_local_0.x = (_hx_local_1 - p.x)
        _hx_local_0.x
        _hx_local_2 = self
        _hx_local_3 = _hx_local_2.y
        _hx_local_2.y = (_hx_local_3 - p.y)
        _hx_local_2.y
        return self

    def neg(self):
        self.w = -self.w
        self.x = -self.x
        self.y = -self.y
        return self

    def mul(self, m):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.w
        _hx_local_0.w = (_hx_local_1 * m)
        _hx_local_0.w
        _hx_local_2 = self
        _hx_local_3 = _hx_local_2.x
        _hx_local_2.x = (_hx_local_3 * m)
        _hx_local_2.x
        _hx_local_4 = self
        _hx_local_5 = _hx_local_4.y
        _hx_local_4.y = (_hx_local_5 * m)
        _hx_local_4.y
        return self

    def div(self, m):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.w
        _hx_local_0.w = (_hx_local_1 / m)
        _hx_local_0.w
        _hx_local_2 = self
        _hx_local_3 = _hx_local_2.x
        _hx_local_2.x = (_hx_local_3 / m)
        _hx_local_2.x
        _hx_local_4 = self
        _hx_local_5 = _hx_local_4.y
        _hx_local_4.y = (_hx_local_5 / m)
        _hx_local_4.y
        return self

    def normalize(self):
        return self.div(self.length())

    def lengthSquared(self):
        return ((self.x * self.x) + ((self.y * self.y)))

    def length(self):
        v = self.lengthSquared()
        if (v < 0):
            return Math.NaN
        else:
            return python_lib_Math.sqrt(v)

    def perp(self):
        tmp = -self.y
        self.y = self.x
        self.x = tmp
        return self

    def dotPoint(self, p):
        return ((self.w + ((self.x * p.x))) + ((self.y * p.y)))

    def dot(self, p):
        return (((self.w * p.w) + ((self.x * p.x))) + ((self.y * p.y)))

    def perpdot(self, p):
        return ((self.x * p.y) - ((self.y * p.x)))

    def dotperp(self, p):
        return ((-self.x * p.y) + ((self.y * p.x)))

    def equals(self, p):
        if ((p.w * self.x) == ((self.w * p.x))):
            return ((p.w * self.y) == ((self.w * p.y)))
        else:
            return False

    def left(self, p):
        return (self.dotPoint(p) > 0)

    def right(self, p):
        return (self.dotPoint(p) < 0)

    def toScreen(self):
        return hxGeomAlgo__HxPoint_HxPoint_Impl_._new((self.x / self.w), (-self.y / self.w))

    def toPoint(self):
        return hxGeomAlgo__HxPoint_HxPoint_Impl_._new((self.x / self.w), (self.y / self.w))

    def meet(self, p):
        return hxGeomAlgo_HomogCoord(((p.w * self.y) - ((self.w * p.y))), ((self.w * p.x) - ((p.w * self.x))),
                                     ((self.x * p.y) - ((self.y * p.x))))

    def meetPoint(self, p):
        return hxGeomAlgo_HomogCoord((self.y - ((self.w * p.y))), ((self.w * p.x) - self.x),
                                     ((self.x * p.y) - ((self.y * p.x))))

    def toString(self):
        return ((((((" (w:" + Std.string(self.w)) + "; x:") + Std.string(self.x)) + ", y:") + Std.string(self.y)) +
                ")  ")

    @staticmethod
    def det(p, q, r):
        return (((p.w * q.perpdot(r)) - ((q.w * p.perpdot(r)))) + ((r.w * p.perpdot(q))))

    @staticmethod
    def ccw(p, q, r):
        return (hxGeomAlgo_HomogCoord.det(p, q, r) > 0)

    @staticmethod
    def cw(p, q, r):
        return (hxGeomAlgo_HomogCoord.det(p, q, r) < 0)


class hxGeomAlgo_HxPointData:
    _hx_class_name = "hxGeomAlgo.HxPointData"
    __slots__ = ("x", "y")
    _hx_fields = ["x", "y"]
    _hx_methods = ["toString"]

    def __init__(self, x=None, y=None):
        if (x is None):
            x = 0
        if (y is None):
            y = 0
        self.x = x
        self.y = y

    def toString(self):
        return (((("(" + Std.string(self.x)) + ", ") + Std.string(self.y)) + ")")


class hxGeomAlgo__HxPoint_HxPoint_Impl_:
    _hx_class_name = "hxGeomAlgo._HxPoint.HxPoint_Impl_"
    __slots__ = ()
    _hx_statics = [
        "EMPTY", "get_x", "set_x", "get_y", "set_y", "_new", "setTo", "equals", "clone", "toString", "fromPointStruct",
        "toPointStruct"
    ]
    x = None
    y = None

    @staticmethod
    def get_x(this1):
        return this1.x

    @staticmethod
    def set_x(this1, value):
        def _hx_local_1():
            def _hx_local_0():
                this1.x = value
                return this1.x

            return _hx_local_0()

        return _hx_local_1()

    @staticmethod
    def get_y(this1):
        return this1.y

    @staticmethod
    def set_y(this1, value):
        def _hx_local_1():
            def _hx_local_0():
                this1.y = value
                return this1.y

            return _hx_local_0()

        return _hx_local_1()

    @staticmethod
    def _new(x=None, y=None):
        if (x is None):
            x = 0
        if (y is None):
            y = 0
        this1 = hxGeomAlgo_HxPointData(x, y)
        return this1

    @staticmethod
    def setTo(this1, newX, newY):
        this1.x = newX
        this1.y = newY

    @staticmethod
    def equals(this1, p):
        if ((p is not None) and ((this1.x == p.x))):
            return (this1.y == p.y)
        else:
            return False

    @staticmethod
    def clone(this1):
        return hxGeomAlgo__HxPoint_HxPoint_Impl_._new(this1.x, this1.y)

    @staticmethod
    def toString(this1):
        return (((("(" + Std.string(this1.x)) + ", ") + Std.string(this1.y)) + ")")

    @staticmethod
    def fromPointStruct(p):
        return hxGeomAlgo__HxPoint_HxPoint_Impl_._new(p.x, p.y)

    @staticmethod
    def toPointStruct(this1):
        return _hx_AnonObject({'x': this1.x, 'y': this1.y})


class hxGeomAlgo_PairDeque:
    _hx_class_name = "hxGeomAlgo.PairDeque"
    __slots__ = ("front", "back", "frontTopIdx", "backTopIdx", "lastIdx")
    _hx_fields = ["front", "back", "frontTopIdx", "backTopIdx", "lastIdx"]
    _hx_methods = [
        "push", "pushNarrow", "isFrontEmpty", "frontHasNext", "flush", "frontTop", "frontPeekNext", "backBottom",
        "popFront", "restore", "isBackEmpty", "backHasNext", "frontBottom", "backPeekNext", "backTop", "popBack",
        "toString"
    ]

    def __init__(self):
        def _hx_local_0():
            self.frontTopIdx = -1
            return self.frontTopIdx

        self.lastIdx = _hx_local_0()
        self.backTopIdx = 0
        self.front = list()
        self.back = list()

    def push(self, i, j):
        def _hx_local_2():
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.frontTopIdx
            _hx_local_0.frontTopIdx = (_hx_local_1 + 1)
            return _hx_local_0.frontTopIdx

        tmp = (len(self.front) <= _hx_local_2())
        if tmp:
            _this = self.front
            _this.append(-1)
            _this1 = self.back
            _this1.append(-1)
        python_internal_ArrayImpl._set(self.front, self.frontTopIdx, i)
        python_internal_ArrayImpl._set(self.back, self.frontTopIdx, j)
        self.lastIdx = self.frontTopIdx

    def pushNarrow(self, i, j):
        if ((not self.isFrontEmpty()) and ((i <= self.frontTop()))):
            return
        while ((not self.isFrontEmpty()) and ((self.backBottom() >= j))):
            self.popFront()
        self.push(i, j)

    def isFrontEmpty(self):
        return (self.frontTopIdx < 0)

    def frontHasNext(self):
        return (self.frontTopIdx > 0)

    def flush(self):
        def _hx_local_0():
            self.frontTopIdx = -1
            return self.frontTopIdx

        self.lastIdx = _hx_local_0()

    def frontTop(self):
        if (self.frontTopIdx < 0):
            return 0
        return python_internal_ArrayImpl._get(self.front, self.frontTopIdx)

    def frontPeekNext(self):
        return python_internal_ArrayImpl._get(self.front, (self.frontTopIdx - 1))

    def backBottom(self):
        return python_internal_ArrayImpl._get(self.back, self.frontTopIdx)

    def popFront(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.frontTopIdx
                _hx_local_0.frontTopIdx = (_hx_local_1 - 1)
                return _hx_local_1

            return python_internal_ArrayImpl._get(self.front, _hx_local_2())

        return _hx_local_3()

    def restore(self):
        self.backTopIdx = 0
        self.frontTopIdx = self.lastIdx

    def isBackEmpty(self):
        return (self.backTopIdx > self.lastIdx)

    def backHasNext(self):
        return (self.backTopIdx < self.lastIdx)

    def frontBottom(self):
        return python_internal_ArrayImpl._get(self.front, self.backTopIdx)

    def backPeekNext(self):
        return python_internal_ArrayImpl._get(self.back, (self.backTopIdx + 1))

    def backTop(self):
        return python_internal_ArrayImpl._get(self.back, self.backTopIdx)

    def popBack(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.backTopIdx
                _hx_local_0.backTopIdx = (_hx_local_1 + 1)
                return _hx_local_1

            return python_internal_ArrayImpl._get(self.back, _hx_local_2())

        return _hx_local_3()

    def toString(self):
        stringBuffer_b = python_lib_io_StringIO()
        stringBuffer_b.write(
            Std.string(
                (((((("fp:" + Std.string(self.frontTopIdx)) + ", bp:") + Std.string(self.backTopIdx)) + ", last:") +
                  Std.string(self.lastIdx)) + ": ")))
        _g = 0
        _g1 = (self.lastIdx + 1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            stringBuffer_b.write(
                Std.string((((Std.string(
                    (self.front[i] if i >= 0 and i < len(self.front) else None)) + ",") + Std.string(
                        (self.back[i] if i >= 0 and i < len(self.back) else None))) + "  ")))
        return stringBuffer_b.getvalue()


class hxGeomAlgo_PolyTools:
    _hx_class_name = "hxGeomAlgo.PolyTools"
    __slots__ = ()
    _hx_statics = [
        "point", "zero", "EPSILON", "isCCW", "isCW", "makeCCW", "makeCW", "isConvex", "isSimple", "segmentIntersect",
        "findDuplicatePoints", "intersection", "isReflex", "at", "wrappedIdx", "side", "isLeft", "isLeftOrOn",
        "isRight", "isRightOrOn", "isCollinear", "distance", "distanceToSegment", "distanceSquared",
        "distanceToSegmentSquared", "getCentroid", "getArea", "meet", "dot", "sqr", "eq", "clear", "toFloatArray",
        "reverseFloatArray", "flatten", "toPointArray", "parsePoints", "inflateLine", "clip", "lerp", "lerpPoints",
        "exposeEnum"
    ]

    @staticmethod
    def isCCW(poly):
        if (len(poly) <= 2):
            return True
        signedArea = 0.
        _g = 0
        _g1 = len(poly)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            idx = (i - 1)
            idx1 = idx
            _hx_len = len(poly)
            if (idx1 < 0):
                idx1 = (idx1 + _hx_len)
            idx = HxOverrides.mod(idx1, _hx_len)
            idx2 = (i - 1)
            idx3 = idx2
            len1 = len(poly)
            if (idx3 < 0):
                idx3 = (idx3 + len1)
            idx2 = HxOverrides.mod(idx3, len1)
            signedArea = (signedArea + ((((poly[idx] if idx >= 0 and idx < len(poly) else None).x *
                                          (poly[i] if i >= 0 and i < len(poly) else None).y) -
                                         (((poly[i] if i >= 0 and i < len(poly) else None).x *
                                           (poly[idx2] if idx2 >= 0 and idx2 < len(poly) else None).y)))))
        return (signedArea < 0)

    @staticmethod
    def isCW(poly):
        if (len(poly) <= 2):
            return True
        signedArea = 0.
        _g = 0
        _g1 = len(poly)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            idx = (i - 1)
            idx1 = idx
            _hx_len = len(poly)
            if (idx1 < 0):
                idx1 = (idx1 + _hx_len)
            idx = HxOverrides.mod(idx1, _hx_len)
            idx2 = (i - 1)
            idx3 = idx2
            len1 = len(poly)
            if (idx3 < 0):
                idx3 = (idx3 + len1)
            idx2 = HxOverrides.mod(idx3, len1)
            signedArea = (signedArea + ((((poly[idx] if idx >= 0 and idx < len(poly) else None).x *
                                          (poly[i] if i >= 0 and i < len(poly) else None).y) -
                                         (((poly[i] if i >= 0 and i < len(poly) else None).x *
                                           (poly[idx2] if idx2 >= 0 and idx2 < len(poly) else None).y)))))
        return (signedArea > 0)

    @staticmethod
    def makeCCW(poly):
        reversed = False
        if (not hxGeomAlgo_PolyTools.isCCW(poly)):
            poly.reverse()
            reversed = True
        return reversed

    @staticmethod
    def makeCW(poly):
        reversed = False
        if hxGeomAlgo_PolyTools.isCCW(poly):
            poly.reverse()
            reversed = True
        return reversed

    @staticmethod
    def isConvex(poly):
        isPositive = None
        _g = 0
        _g1 = len(poly)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            lower = ((len(poly) - 1) if ((i == 0)) else (i - 1))
            middle = i
            upper = (0 if ((i == ((len(poly) - 1)))) else (i + 1))
            dx0 = ((poly[middle] if middle >= 0 and middle < len(poly) else None).x -
                   (poly[lower] if lower >= 0 and lower < len(poly) else None).x)
            dy0 = ((poly[middle] if middle >= 0 and middle < len(poly) else None).y -
                   (poly[lower] if lower >= 0 and lower < len(poly) else None).y)
            dx1 = ((poly[upper] if upper >= 0 and upper < len(poly) else None).x -
                   (poly[middle] if middle >= 0 and middle < len(poly) else None).x)
            dy1 = ((poly[upper] if upper >= 0 and upper < len(poly) else None).y -
                   (poly[middle] if middle >= 0 and middle < len(poly) else None).y)
            cross = ((dx0 * dy1) - ((dx1 * dy0)))
            newIsPositive = (cross > 0)
            if (cross == 0):
                continue
            if (isPositive is None):
                isPositive = newIsPositive
            elif (isPositive != newIsPositive):
                return False
        return True

    @staticmethod
    def isSimple(poly):
        _hx_len = len(poly)
        if (_hx_len <= 3):
            return True
        _g = 0
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            p0 = i
            p1 = (0 if ((i == ((_hx_len - 1)))) else (i + 1))
            _g2 = (i + 1)
            _g11 = _hx_len
            while (_g2 < _g11):
                j = _g2
                _g2 = (_g2 + 1)
                q0 = j
                q1 = (0 if ((j == ((_hx_len - 1)))) else (j + 1))
                intersection = hxGeomAlgo_PolyTools.segmentIntersect(
                    (poly[p0] if p0 >= 0 and p0 < len(poly) else None),
                    (poly[p1] if p1 >= 0 and p1 < len(poly) else None),
                    (poly[q0] if q0 >= 0 and q0 < len(poly) else None),
                    (poly[q1] if q1 >= 0 and q1 < len(poly) else None))
                tmp = None
                tmp1 = None
                if (intersection is not None):
                    tmp2 = None
                    w = (poly[p0] if p0 >= 0 and p0 < len(poly) else None)
                    x = (intersection.x - w.x)
                    x1 = (intersection.y - w.y)
                    v = ((x * x) + ((x1 * x1)))
                    if (not ((((Math.NaN if ((v < 0)) else python_lib_Math.sqrt(v))) < hxGeomAlgo_PolyTools.EPSILON))):
                        w1 = (poly[p1] if p1 >= 0 and p1 < len(poly) else None)
                        x2 = (intersection.x - w1.x)
                        x3 = (intersection.y - w1.y)
                        v1 = ((x2 * x2) + ((x3 * x3)))
                        tmp2 = (((Math.NaN if
                                  ((v1 < 0)) else python_lib_Math.sqrt(v1))) < hxGeomAlgo_PolyTools.EPSILON)
                    else:
                        tmp2 = True
                    tmp1 = (not tmp2)
                else:
                    tmp1 = False
                if tmp1:
                    tmp3 = None
                    w2 = (poly[q0] if q0 >= 0 and q0 < len(poly) else None)
                    x4 = (intersection.x - w2.x)
                    x5 = (intersection.y - w2.y)
                    v2 = ((x4 * x4) + ((x5 * x5)))
                    if (not ((((Math.NaN if
                                ((v2 < 0)) else python_lib_Math.sqrt(v2))) < hxGeomAlgo_PolyTools.EPSILON))):
                        w3 = (poly[q1] if q1 >= 0 and q1 < len(poly) else None)
                        x6 = (intersection.x - w3.x)
                        x7 = (intersection.y - w3.y)
                        v3 = ((x6 * x6) + ((x7 * x7)))
                        tmp3 = (((Math.NaN if
                                  ((v3 < 0)) else python_lib_Math.sqrt(v3))) < hxGeomAlgo_PolyTools.EPSILON)
                    else:
                        tmp3 = True
                    tmp = (not tmp3)
                else:
                    tmp = False
                if tmp:
                    return False
        return True

    @staticmethod
    def segmentIntersect(p0, p1, q0, q1):
        a1 = (p1.y - p0.y)
        b1 = (p0.x - p1.x)
        c1 = ((p1.x * p0.y) - ((p0.x * p1.y)))
        a2 = (q1.y - q0.y)
        b2 = (q0.x - q1.x)
        c2 = ((q1.x * q0.y) - ((q0.x * q1.y)))
        denom = ((a1 * b2) - ((a2 * b1)))
        if (denom == 0):
            return None
        intersectionPoint = hxGeomAlgo__HxPoint_HxPoint_Impl_._new()
        intersectionPoint.x = ((((b1 * c2) - ((b2 * c1)))) / denom)
        intersectionPoint.y = ((((a2 * c1) - ((a1 * c2)))) / denom)
        x = (p0.x - p1.x)
        x1 = (p0.y - p1.y)
        p0p1 = ((x * x) + ((x1 * x1)))
        x2 = (q0.x - q1.x)
        x3 = (q0.y - q1.y)
        q0q1 = ((x2 * x2) + ((x3 * x3)))
        x4 = (intersectionPoint.x - p1.x)
        x5 = (intersectionPoint.y - p1.y)
        if (((x4 * x4) + ((x5 * x5))) > p0p1):
            return None
        x6 = (intersectionPoint.x - p0.x)
        x7 = (intersectionPoint.y - p0.y)
        if (((x6 * x6) + ((x7 * x7))) > p0p1):
            return None
        x8 = (intersectionPoint.x - q1.x)
        x9 = (intersectionPoint.y - q1.y)
        if (((x8 * x8) + ((x9 * x9))) > q0q1):
            return None
        x10 = (intersectionPoint.x - q0.x)
        x11 = (intersectionPoint.y - q0.y)
        if (((x10 * x10) + ((x11 * x11))) > q0q1):
            return None
        return intersectionPoint

    @staticmethod
    def findDuplicatePoints(poly, consecutiveOnly=None, wrapAround=None):
        if (consecutiveOnly is None):
            consecutiveOnly = True
        if (wrapAround is None):
            wrapAround = True
        _hx_len = len(poly)
        if (_hx_len <= 1):
            return []
        dupIndices = []
        _g = 0
        _g1 = (_hx_len - 1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            j = (i + 1)
            while (j < _hx_len):
                this1 = (poly[i] if i >= 0 and i < len(poly) else None)
                p = (poly[j] if j >= 0 and j < len(poly) else None)
                foundDup = (((p is not None) and ((this1.x == p.x))) and ((this1.y == p.y)))
                if foundDup:
                    dupIndices.append(i)
                if (consecutiveOnly or ((foundDup and (not consecutiveOnly)))):
                    break
                j = (j + 1)
        tmp = None
        if (wrapAround and consecutiveOnly):
            this2 = (poly[0] if 0 < len(poly) else None)
            p1 = python_internal_ArrayImpl._get(poly, (_hx_len - 1))
            tmp = (((p1 is not None) and ((this2.x == p1.x))) and ((this2.y == p1.y)))
        else:
            tmp = False
        if tmp:
            dupIndices.append((_hx_len - 1))
        return dupIndices

    @staticmethod
    def intersection(p1, p2, q1, q2):
        res = None
        a1 = (p2.y - p1.y)
        b1 = (p1.x - p2.x)
        c1 = ((a1 * p1.x) + ((b1 * p1.y)))
        a2 = (q2.y - q1.y)
        b2 = (q1.x - q2.x)
        c2 = ((a2 * q1.x) + ((b2 * q1.y)))
        det = ((a1 * b2) - ((a2 * b1)))
        if (not ((Reflect.field(Math, "fabs")(det) <= hxGeomAlgo_PolyTools.EPSILON))):
            res = hxGeomAlgo__HxPoint_HxPoint_Impl_._new()
            res.x = ((((b2 * c1) - ((b1 * c2)))) / det)
            res.y = ((((a1 * c2) - ((a2 * c1)))) / det)
        return res

    @staticmethod
    def isReflex(poly, idx):
        idx1 = (idx - 1)
        idx2 = idx1
        _hx_len = len(poly)
        if (idx2 < 0):
            idx2 = (idx2 + _hx_len)
        idx1 = HxOverrides.mod(idx2, _hx_len)
        p = (poly[idx1] if idx1 >= 0 and idx1 < len(poly) else None)
        idx3 = idx
        idx4 = idx3
        len1 = len(poly)
        if (idx4 < 0):
            idx4 = (idx4 + len1)
        idx3 = HxOverrides.mod(idx4, len1)
        a = (poly[idx3] if idx3 >= 0 and idx3 < len(poly) else None)
        idx5 = (idx + 1)
        idx6 = idx5
        len2 = len(poly)
        if (idx6 < 0):
            idx6 = (idx6 + len2)
        idx5 = HxOverrides.mod(idx6, len2)
        b = (poly[idx5] if idx5 >= 0 and idx5 < len(poly) else None)
        return (((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y))))) < 0)

    @staticmethod
    def at(poly, idx):
        idx1 = idx
        _hx_len = len(poly)
        if (idx1 < 0):
            idx1 = (idx1 + _hx_len)
        idx = HxOverrides.mod(idx1, _hx_len)
        return (poly[idx] if idx >= 0 and idx < len(poly) else None)

    @staticmethod
    def wrappedIdx(poly, idx):
        _hx_len = len(poly)
        if (idx < 0):
            idx = (idx + _hx_len)
        return HxOverrides.mod(idx, _hx_len)

    @staticmethod
    def side(p, a, b):
        return ((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y)))))

    @staticmethod
    def isLeft(p, a, b):
        return (((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y))))) > 0)

    @staticmethod
    def isLeftOrOn(p, a, b):
        return (((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y))))) >= 0)

    @staticmethod
    def isRight(p, a, b):
        return (((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y))))) < 0)

    @staticmethod
    def isRightOrOn(p, a, b):
        return (((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y))))) <= 0)

    @staticmethod
    def isCollinear(p, a, b):
        return (((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y))))) == 0)

    @staticmethod
    def distance(v, w):
        x = (v.x - w.x)
        x1 = (v.y - w.y)
        v1 = ((x * x) + ((x1 * x1)))
        if (v1 < 0):
            return Math.NaN
        else:
            return python_lib_Math.sqrt(v1)

    @staticmethod
    def distanceToSegment(p, v, w):
        v1 = hxGeomAlgo_PolyTools.distanceToSegmentSquared(p, v, w)
        if (v1 < 0):
            return Math.NaN
        else:
            return python_lib_Math.sqrt(v1)

    @staticmethod
    def distanceSquared(v, w):
        x = (v.x - w.x)
        x1 = (v.y - w.y)
        return ((x * x) + ((x1 * x1)))

    @staticmethod
    def distanceToSegmentSquared(p, v, w):
        x = (v.x - w.x)
        x1 = (v.y - w.y)
        l2 = ((x * x) + ((x1 * x1)))
        if (l2 == 0):
            x2 = (p.x - v.x)
            x3 = (p.y - v.y)
            return ((x2 * x2) + ((x3 * x3)))
        t = ((((((p.x - v.x)) * ((w.x - v.x))) + ((((p.y - v.y)) * ((w.y - v.y)))))) / l2)
        if (t < 0):
            x4 = (p.x - v.x)
            x5 = (p.y - v.y)
            return ((x4 * x4) + ((x5 * x5)))
        if (t > 1):
            x6 = (p.x - w.x)
            x7 = (p.y - w.y)
            return ((x6 * x6) + ((x7 * x7)))
        this1 = hxGeomAlgo_PolyTools.point
        this1.x = (v.x + ((t * ((w.x - v.x)))))
        this1.y = (v.y + ((t * ((w.y - v.y)))))
        w1 = hxGeomAlgo_PolyTools.point
        x8 = (p.x - w1.x)
        x9 = (p.y - w1.y)
        return ((x8 * x8) + ((x9 * x9)))

    @staticmethod
    def getCentroid(poly):
        c = hxGeomAlgo__HxPoint_HxPoint_Impl_._new()
        area = hxGeomAlgo_PolyTools.getArea(poly)
        if (area != 0):
            _hx_len = len(poly)
            _g = 0
            _g1 = _hx_len
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                p0 = (poly[i] if i >= 0 and i < len(poly) else None)
                p1 = python_internal_ArrayImpl._get(poly, HxOverrides.mod(((i + 1)), _hx_len))
                m = ((p0.x * p1.y) - ((p1.x * p0.y)))
                _hx_local_0 = c
                _hx_local_1 = _hx_local_0.x
                _hx_local_0.x = (_hx_local_1 + ((((p0.x + p1.x)) * m)))
                _hx_local_0.x
                _hx_local_2 = c
                _hx_local_3 = _hx_local_2.y
                _hx_local_2.y = (_hx_local_3 + ((((p0.y + p1.y)) * m)))
                _hx_local_2.y
            _hx_local_4 = c
            _hx_local_5 = _hx_local_4.x
            _hx_local_4.x = (_hx_local_5 / ((6 * area)))
            _hx_local_4.x
            _hx_local_6 = c
            _hx_local_7 = _hx_local_6.y
            _hx_local_6.y = (_hx_local_7 / ((6 * area)))
            _hx_local_6.y
        else:
            c = hxGeomAlgo__HxPoint_HxPoint_Impl_.EMPTY
        return c

    @staticmethod
    def getArea(poly):
        area = 0.0
        _hx_len = len(poly)
        _g = 0
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            p0 = (poly[i] if i >= 0 and i < len(poly) else None)
            p1 = python_internal_ArrayImpl._get(poly, HxOverrides.mod(((i + 1)), _hx_len))
            area = (area + (((p0.x * p1.y) - ((p1.x * p0.y)))))
        area = (.5 * area)
        return area

    @staticmethod
    def meet(p, q):
        return hxGeomAlgo_HomogCoord((p.y - q.y), (q.x - p.x), ((p.x * q.y) - ((p.y * q.x))))

    @staticmethod
    def dot(p, q):
        return ((p.x * q.x) + ((p.y * q.y)))

    @staticmethod
    def sqr(x):
        return (x * x)

    @staticmethod
    def eq(a, b):
        return (Reflect.field(Math, "fabs")((a - b)) <= hxGeomAlgo_PolyTools.EPSILON)

    @staticmethod
    def clear(array):
        array = []

    @staticmethod
    def toFloatArray(poly, out=None):
        out = (out if ((out is not None)) else list())
        _g = 0
        while (_g < len(poly)):
            p = (poly[_g] if _g >= 0 and _g < len(poly) else None)
            _g = (_g + 1)
            x = p.x
            out.append(x)
            x1 = p.y
            out.append(x1)
        return out

    @staticmethod
    def reverseFloatArray(poly, inPlace=None):
        if (inPlace is None):
            inPlace = False
        res = (poly if inPlace else list())
        nPoints = (len(poly) >> 1)
        _g = 0
        _g1 = nPoints
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            xPos = ((((nPoints - i) - 1)) * 2)
            python_internal_ArrayImpl._set(res, (i * 2), (poly[xPos] if xPos >= 0 and xPos < len(poly) else None))
            python_internal_ArrayImpl._set(res, ((i * 2) + 1), python_internal_ArrayImpl._get(poly, (xPos + 1)))
        return res

    @staticmethod
    def flatten(array, out=None):
        res = (out if ((out is not None)) else [])
        _g = 0
        while (_g < len(array)):
            arr = (array[_g] if _g >= 0 and _g < len(array) else None)
            _g = (_g + 1)
            _g1 = 0
            while (_g1 < len(arr)):
                item = (arr[_g1] if _g1 >= 0 and _g1 < len(arr) else None)
                _g1 = (_g1 + 1)
                res.append(item)
        return res

    @staticmethod
    def toPointArray(poly, out=None):
        out = (out if ((out is not None)) else list())
        size = len(poly)
        if (HxOverrides.mod(len(poly), 2) == 1):
            size = (size - 1)
        _g = 0
        _g1 = (size >> 1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = hxGeomAlgo__HxPoint_HxPoint_Impl_._new(python_internal_ArrayImpl._get(poly, (i * 2)),
                                                       python_internal_ArrayImpl._get(poly, ((i * 2) + 1)))
            out.append(x)
        return out

    @staticmethod
    def parsePoints(_hx_str):
        def _hx_local_0(val):
            if (val is not None):
                return (val != "")
            else:
                return False

        floats = list(map(Std.parseFloat, list(filter(_hx_local_0, EReg("[^-eE\\.\\d]+", "g").split(_hx_str)))))
        pts = list()
        n = len(floats)
        _g = 0
        _g1 = None
        try:
            _g1 = int((n / 2))
        except Exception as _hx_e:
            _hx_e1 = _hx_e
            e = _hx_e1
            _g1 = None
        _g11 = _g1
        while (_g < _g11):
            i = _g
            _g = (_g + 1)
            x = hxGeomAlgo__HxPoint_HxPoint_Impl_._new(python_internal_ArrayImpl._get(floats, (i * 2)),
                                                       python_internal_ArrayImpl._get(floats, ((i * 2) + 1)))
            pts.append(x)
        return pts

    @staticmethod
    def inflateLine(start, end, thickness):
        halfWidth = (thickness / 2)
        dx = (end.x - start.x)
        dy = (end.y - start.y)
        v = ((dx * dx) + ((dy * dy)))
        _hx_len = (Math.NaN if ((v < 0)) else python_lib_Math.sqrt(v))
        nx = ((dx / _hx_len) * halfWidth)
        ny = ((dy / _hx_len) * halfWidth)
        return [
            hxGeomAlgo__HxPoint_HxPoint_Impl_._new((start.x - ny), (start.y + nx)),
            hxGeomAlgo__HxPoint_HxPoint_Impl_._new((end.x - ny), (end.y + nx)),
            hxGeomAlgo__HxPoint_HxPoint_Impl_._new((end.x + ny), (end.y - nx)),
            hxGeomAlgo__HxPoint_HxPoint_Impl_._new((start.x + ny), (start.y - nx))
        ]

    @staticmethod
    def clip(subjPoly, clipPoly):
        cond = ((len(clipPoly) >= 3) and hxGeomAlgo_PolyTools.isConvex(clipPoly))
        res = []
        output = subjPoly
        isInside = (hxGeomAlgo_PolyTools.isRight if
                    (hxGeomAlgo_PolyTools.isCCW(clipPoly)) else hxGeomAlgo_PolyTools.isLeft)
        clipEdgeStart = None
        clipEdgeEnd = None
        inputEdgeStart = None
        inputEdgeEnd = None
        clipLen = len(clipPoly)
        _g = 0
        _g1 = clipLen
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            clipEdgeStart = (clipPoly[i] if i >= 0 and i < len(clipPoly) else None)
            idx = (i + 1)
            _hx_len = len(clipPoly)
            if (idx < 0):
                idx = (idx + _hx_len)
            clipEdgeEnd = python_internal_ArrayImpl._get(clipPoly, HxOverrides.mod(idx, _hx_len))
            input = output
            output = []
            inputEdgeStart = python_internal_ArrayImpl._get(input, (len(input) - 1))
            _g2 = 0
            _g11 = len(input)
            while (_g2 < _g11):
                j = _g2
                _g2 = (_g2 + 1)
                inputEdgeEnd = (input[j] if j >= 0 and j < len(input) else None)
                if isInside(inputEdgeEnd, clipEdgeStart, clipEdgeEnd):
                    if (not isInside(inputEdgeStart, clipEdgeStart, clipEdgeEnd)):
                        intersectionPoint = hxGeomAlgo_PolyTools.intersection(inputEdgeStart, inputEdgeEnd,
                                                                              clipEdgeStart, clipEdgeEnd)
                        if (intersectionPoint is not None):
                            output.append(intersectionPoint)
                    output.append(inputEdgeEnd)
                elif isInside(inputEdgeStart, clipEdgeStart, clipEdgeEnd):
                    intersectionPoint1 = hxGeomAlgo_PolyTools.intersection(inputEdgeStart, inputEdgeEnd, clipEdgeStart,
                                                                           clipEdgeEnd)
                    if (intersectionPoint1 is not None):
                        output.append(intersectionPoint1)
                inputEdgeStart = inputEdgeEnd
            res.append(output)
        return res

    @staticmethod
    def lerp(a, b, t):
        return ((((1.0 - t)) * a) + ((t * b)))

    @staticmethod
    def lerpPoints(a, b, t):
        return hxGeomAlgo__HxPoint_HxPoint_Impl_._new(((((1.0 - t)) * a.x) + ((t * b.x))),
                                                      ((((1.0 - t)) * a.y) + ((t * b.y))))

    @staticmethod
    def exposeEnum(enumClass, _hx_as=None):
        pass


class hxGeomAlgo_SnoeyinkKeil:
    _hx_class_name = "hxGeomAlgo.SnoeyinkKeil"
    __slots__ = ()
    _hx_statics = ["poly", "reversed", "diagonals", "decomposePoly", "decomposePolyIndices"]
    poly = None
    reversed = None
    diagonals = None

    @staticmethod
    def decomposePoly(simplePoly):
        res = list()
        indices = hxGeomAlgo_SnoeyinkKeil.decomposePolyIndices(simplePoly)
        _g = 0
        while (_g < len(indices)):
            polyIndices = (indices[_g] if _g >= 0 and _g < len(indices) else None)
            _g = (_g + 1)
            currPoly = list()
            res.append(currPoly)
            _g1 = 0
            while (_g1 < len(polyIndices)):
                idx = (polyIndices[_g1] if _g1 >= 0 and _g1 < len(polyIndices) else None)
                _g1 = (_g1 + 1)
                currPoly.append((simplePoly[idx] if idx >= 0 and idx < len(simplePoly) else None))
        return res

    @staticmethod
    def decomposePolyIndices(simplePoly):
        res = list()
        hxGeomAlgo_SnoeyinkKeil.diagonals = []
        if (len(simplePoly) < 3):
            return res
        hxGeomAlgo_SnoeyinkKeil.poly = list()
        _g = 0
        while (_g < len(simplePoly)):
            p = (simplePoly[_g] if _g >= 0 and _g < len(simplePoly) else None)
            _g = (_g + 1)
            _this = hxGeomAlgo_SnoeyinkKeil.poly
            x = hxGeomAlgo__HxPoint_HxPoint_Impl_._new(p.x, p.y)
            _this.append(x)
        hxGeomAlgo_SnoeyinkKeil.reversed = hxGeomAlgo_PolyTools.makeCW(hxGeomAlgo_SnoeyinkKeil.poly)
        i = None
        j = None
        k = None
        n = len(hxGeomAlgo_SnoeyinkKeil.poly)
        decomp = hxGeomAlgo_DecompPoly(hxGeomAlgo_SnoeyinkKeil.poly)
        decomp.init()
        _g1 = 3
        _g2 = n
        while (_g1 < _g2):
            l = _g1
            _g1 = (_g1 + 1)
            i = decomp.reflexIter()
            while ((i + l) < n):
                k = (i + l)
                if decomp.visible(i, k):
                    decomp.initPairs(i, k)
                    if decomp.isReflex(k):
                        _g11 = (i + 1)
                        _g21 = k
                        while (_g11 < _g21):
                            j1 = _g11
                            _g11 = (_g11 + 1)
                            decomp.typeA(i, j1, k)
                    else:
                        j = decomp.reflexIter((i + 1))
                        while (j < ((k - 1))):
                            decomp.typeA(i, j, k)
                            j = decomp.reflexNext(j)
                        decomp.typeA(i, (k - 1), k)
                i = decomp.reflexNext(i)
            k = decomp.reflexIter(l)
            while (k < n):
                i = (k - l)
                if ((not decomp.isReflex(i)) and decomp.visible(i, k)):
                    decomp.initPairs(i, k)
                    decomp.typeB(i, (i + 1), k)
                    j = decomp.reflexIter((i + 2))
                    while (j < k):
                        decomp.typeB(i, j, k)
                        j = decomp.reflexNext(j)
                k = decomp.reflexNext(k)
        decomp.guard = (3 * n)
        decomp.recoverSolution(0, (n - 1))
        res = decomp.decompIndices()
        if hxGeomAlgo_SnoeyinkKeil.reversed:
            _g3 = 0
            while (_g3 < len(res)):
                poly = (res[_g3] if _g3 >= 0 and _g3 < len(res) else None)
                _g3 = (_g3 + 1)
                _g31 = 0
                _g4 = len(poly)
                while (_g31 < _g4):
                    i1 = _g31
                    _g31 = (_g31 + 1)
                    python_internal_ArrayImpl._set(poly, i1,
                                                   ((n - (poly[i1] if i1 >= 0 and i1 < len(poly) else None)) - 1))
            _g41 = 0
            _g5 = hxGeomAlgo_SnoeyinkKeil.diagonals
            while (_g41 < len(_g5)):
                d = (_g5[_g41] if _g41 >= 0 and _g41 < len(_g5) else None)
                _g41 = (_g41 + 1)
                tmp = d._hx_from
                d._hx_from = ((n - d.to) - 1)
                d.to = ((n - tmp) - 1)
        return res


class hxGeomAlgo_DecompPoly:
    _hx_class_name = "hxGeomAlgo.DecompPoly"
    __slots__ = ("guard", "poly", "n", "subDecomp", "_reflexFirst", "_reflexNext", "_reflexFlag", "_indicesSet",
                 "_polys", "_diags")
    _hx_fields = [
        "guard", "poly", "n", "subDecomp", "_reflexFirst", "_reflexNext", "_reflexFlag", "_indicesSet", "_polys",
        "_diags"
    ]
    _hx_methods = [
        "init", "initReflex", "isReflex", "reflexNext", "reflexIter", "visible", "initVisibility", "setAfter",
        "setBefore", "initSubProblems", "initPairs", "recoverSolution", "typeA", "typeB", "update", "_decompByDiags",
        "intCmp", "decompIndices", "toString"
    ]
    _hx_statics = ["INFINITY", "BAD", "NONE"]

    def __init__(self, poly):
        self._reflexFlag = None
        self._reflexNext = None
        self._reflexFirst = None
        self.subDecomp = None
        self.guard = None
        self._diags = []
        self._polys = list()
        self._indicesSet = haxe_ds_IntMap()
        self.poly = poly
        self.n = len(poly)

    def init(self):
        self.initReflex()
        self.subDecomp = hxGeomAlgo_SubDecomp(self._reflexFlag)
        self.initVisibility()
        self.initSubProblems()

    def initReflex(self):
        self._reflexFlag = list()
        self._reflexNext = list()
        _g = 0
        _g1 = self.n
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            python_internal_ArrayImpl._set(self._reflexFlag, i, False)
            python_internal_ArrayImpl._set(self._reflexNext, i, -1)
        wrap = 0
        python_internal_ArrayImpl._set(self._reflexFlag, wrap, True)
        i1 = (self.n - 1)
        while (i1 > 0):
            poly = self.poly
            idx = (i1 - 1)
            idx1 = idx
            _hx_len = len(poly)
            if (idx1 < 0):
                idx1 = (idx1 + _hx_len)
            idx = HxOverrides.mod(idx1, _hx_len)
            p = (poly[idx] if idx >= 0 and idx < len(poly) else None)
            poly1 = self.poly
            idx2 = i1
            idx3 = idx2
            len1 = len(poly1)
            if (idx3 < 0):
                idx3 = (idx3 + len1)
            idx2 = HxOverrides.mod(idx3, len1)
            a = (poly1[idx2] if idx2 >= 0 and idx2 < len(poly1) else None)
            poly2 = self.poly
            idx4 = wrap
            idx5 = idx4
            len2 = len(poly2)
            if (idx5 < 0):
                idx5 = (idx5 + len2)
            idx4 = HxOverrides.mod(idx5, len2)
            b = (poly2[idx4] if idx4 >= 0 and idx4 < len(poly2) else None)
            python_internal_ArrayImpl._set(self._reflexFlag, i1,
                                           (((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y))))) < 0))
            wrap = i1
            i1 = (i1 - 1)
        self._reflexFirst = self.n
        i1 = (self.n - 1)
        while (i1 >= 0):
            python_internal_ArrayImpl._set(self._reflexNext, i1, self._reflexFirst)
            if self.isReflex(i1):
                self._reflexFirst = i1
            i1 = (i1 - 1)

    def isReflex(self, i):
        return (self._reflexFlag[i] if i >= 0 and i < len(self._reflexFlag) else None)

    def reflexNext(self, i):
        return (self._reflexNext[i] if i >= 0 and i < len(self._reflexNext) else None)

    def reflexIter(self, n=None):
        if ((n is None) or ((n <= 0))):
            return self._reflexFirst
        if (n > len(self._reflexNext)):
            return len(self._reflexNext)
        return python_internal_ArrayImpl._get(self._reflexNext, (n - 1))

    def visible(self, i, j):
        return (self.subDecomp.weight(i, j) < hxGeomAlgo_DecompPoly.BAD)

    def initVisibility(self):
        visIndices = None
        i = self.reflexIter()
        while (i < self.n):
            visIndices = hxGeomAlgo_Visibility.getVisibleIndicesFrom(self.poly, i)
            while (len(visIndices) > 0):
                j = (None if ((len(visIndices) == 0)) else visIndices.pop())
                if (j < i):
                    self.subDecomp.setWeight(j, i, hxGeomAlgo_DecompPoly.INFINITY)
                else:
                    self.subDecomp.setWeight(i, j, hxGeomAlgo_DecompPoly.INFINITY)
            i = (self._reflexNext[i] if i >= 0 and i < len(self._reflexNext) else None)

    def setAfter(self, i):
        cond = self.isReflex(i)
        self.subDecomp.setWeight(i, (i + 1), 0)
        if self.visible(i, (i + 2)):
            self.subDecomp.initWithWeight(i, (i + 2), 0, (i + 1), (i + 1))

    def setBefore(self, i):
        cond = self.isReflex(i)
        self.subDecomp.setWeight((i - 1), i, 0)
        if self.visible((i - 2), i):
            self.subDecomp.initWithWeight((i - 2), i, 0, (i - 1), (i - 1))

    def initSubProblems(self):
        i = self.reflexIter()
        if (i == 0):
            self.setAfter(i)
            i = (self._reflexNext[i] if i >= 0 and i < len(self._reflexNext) else None)
        if (i == 1):
            self.subDecomp.setWeight(0, 1, 0)
            self.setAfter(i)
            i = (self._reflexNext[i] if i >= 0 and i < len(self._reflexNext) else None)
        while (i < ((self.n - 2))):
            self.setBefore(i)
            self.setAfter(i)
            i = (self._reflexNext[i] if i >= 0 and i < len(self._reflexNext) else None)
        if (i == ((self.n - 2))):
            self.setBefore(i)
            self.subDecomp.setWeight(i, (i + 1), 0)
            i = (self._reflexNext[i] if i >= 0 and i < len(self._reflexNext) else None)
        if (i == ((self.n - 1))):
            self.setBefore(i)

    def initPairs(self, i, k):
        self.subDecomp.init(i, k)

    def recoverSolution(self, i, k):
        j = None
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.guard
        _hx_local_0.guard = (_hx_local_1 - 1)
        _hx_local_1
        if ((k - i) <= 1):
            return
        pair = self.subDecomp.pairs(i, k)
        if self.isReflex(i):
            j = pair.backTop()
            self.recoverSolution(j, k)
            if ((j - i) > 1):
                if (pair.frontBottom() != pair.backTop()):
                    pd = self.subDecomp.pairs(i, j)
                    pd.restore()
                    while ((not pd.isBackEmpty()) and ((pair.frontBottom() != pd.frontBottom()))):
                        pd.popBack()
                self.recoverSolution(i, j)
        else:
            j = pair.frontTop()
            self.recoverSolution(i, j)
            if ((k - j) > 1):
                if (pair.frontTop() != pair.backBottom()):
                    pd1 = self.subDecomp.pairs(j, k)
                    pd1.restore()
                    while ((not pd1.isFrontEmpty()) and ((pair.backBottom() != pd1.backBottom()))):
                        pd1.popFront()
                self.recoverSolution(j, k)

    def typeA(self, i, j, k):
        if (not self.visible(i, j)):
            return
        top = j
        w = self.subDecomp.weight(i, j)
        if ((k - j) > 1):
            if (not self.visible(j, k)):
                return
            w = (w + ((self.subDecomp.weight(j, k) + 1)))
        if ((j - i) > 1):
            pair = self.subDecomp.pairs(i, j)
            poly = self.poly
            idx = k
            idx1 = idx
            _hx_len = len(poly)
            if (idx1 < 0):
                idx1 = (idx1 + _hx_len)
            idx = HxOverrides.mod(idx1, _hx_len)
            p = (poly[idx] if idx >= 0 and idx < len(poly) else None)
            poly1 = self.poly
            idx2 = j
            idx3 = idx2
            len1 = len(poly1)
            if (idx3 < 0):
                idx3 = (idx3 + len1)
            idx2 = HxOverrides.mod(idx3, len1)
            a = (poly1[idx2] if idx2 >= 0 and idx2 < len(poly1) else None)
            poly2 = self.poly
            idx4 = pair.backTop()
            idx5 = idx4
            len2 = len(poly2)
            if (idx5 < 0):
                idx5 = (idx5 + len2)
            idx4 = HxOverrides.mod(idx5, len2)
            b = (poly2[idx4] if idx4 >= 0 and idx4 < len(poly2) else None)
            if (not ((((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y))))) > 0))):
                while True:
                    tmp = None
                    if pair.backHasNext():
                        poly3 = self.poly
                        idx6 = k
                        idx7 = idx6
                        len3 = len(poly3)
                        if (idx7 < 0):
                            idx7 = (idx7 + len3)
                        idx6 = HxOverrides.mod(idx7, len3)
                        p1 = (poly3[idx6] if idx6 >= 0 and idx6 < len(poly3) else None)
                        poly4 = self.poly
                        idx8 = j
                        idx9 = idx8
                        len4 = len(poly4)
                        if (idx9 < 0):
                            idx9 = (idx9 + len4)
                        idx8 = HxOverrides.mod(idx9, len4)
                        a1 = (poly4[idx8] if idx8 >= 0 and idx8 < len(poly4) else None)
                        poly5 = self.poly
                        idx10 = pair.backPeekNext()
                        idx11 = idx10
                        len5 = len(poly5)
                        if (idx11 < 0):
                            idx11 = (idx11 + len5)
                        idx10 = HxOverrides.mod(idx11, len5)
                        b1 = (poly5[idx10] if idx10 >= 0 and idx10 < len(poly5) else None)
                        tmp = (not ((((((a1.x - p1.x)) * ((b1.y - p1.y))) - ((((b1.x - p1.x)) *
                                                                              ((a1.y - p1.y))))) > 0)))
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    pair.popBack()
                tmp1 = None
                if (not pair.isBackEmpty()):
                    poly6 = self.poly
                    idx12 = k
                    idx13 = idx12
                    len6 = len(poly6)
                    if (idx13 < 0):
                        idx13 = (idx13 + len6)
                    idx12 = HxOverrides.mod(idx13, len6)
                    p2 = (poly6[idx12] if idx12 >= 0 and idx12 < len(poly6) else None)
                    poly7 = self.poly
                    idx14 = i
                    idx15 = idx14
                    len7 = len(poly7)
                    if (idx15 < 0):
                        idx15 = (idx15 + len7)
                    idx14 = HxOverrides.mod(idx15, len7)
                    a2 = (poly7[idx14] if idx14 >= 0 and idx14 < len(poly7) else None)
                    poly8 = self.poly
                    idx16 = pair.frontBottom()
                    idx17 = idx16
                    len8 = len(poly8)
                    if (idx17 < 0):
                        idx17 = (idx17 + len8)
                    idx16 = HxOverrides.mod(idx17, len8)
                    b2 = (poly8[idx16] if idx16 >= 0 and idx16 < len(poly8) else None)
                    tmp1 = (not ((((((a2.x - p2.x)) * ((b2.y - p2.y))) - ((((b2.x - p2.x)) * ((a2.y - p2.y))))) < 0)))
                else:
                    tmp1 = False
                if tmp1:
                    top = pair.frontBottom()
                else:
                    w = (w + 1)
            else:
                w = (w + 1)
        self.update(i, k, w, top, j)

    def typeB(self, i, j, k):
        if (not self.visible(j, k)):
            return
        top = j
        w = self.subDecomp.weight(j, k)
        if ((j - i) > 1):
            if (not self.visible(i, j)):
                return
            w = (w + ((self.subDecomp.weight(i, j) + 1)))
        if ((k - j) > 1):
            pair = self.subDecomp.pairs(j, k)
            poly = self.poly
            idx = i
            idx1 = idx
            _hx_len = len(poly)
            if (idx1 < 0):
                idx1 = (idx1 + _hx_len)
            idx = HxOverrides.mod(idx1, _hx_len)
            p = (poly[idx] if idx >= 0 and idx < len(poly) else None)
            poly1 = self.poly
            idx2 = j
            idx3 = idx2
            len1 = len(poly1)
            if (idx3 < 0):
                idx3 = (idx3 + len1)
            idx2 = HxOverrides.mod(idx3, len1)
            a = (poly1[idx2] if idx2 >= 0 and idx2 < len(poly1) else None)
            poly2 = self.poly
            idx4 = pair.frontTop()
            idx5 = idx4
            len2 = len(poly2)
            if (idx5 < 0):
                idx5 = (idx5 + len2)
            idx4 = HxOverrides.mod(idx5, len2)
            b = (poly2[idx4] if idx4 >= 0 and idx4 < len(poly2) else None)
            if (not ((((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y))))) < 0))):
                while True:
                    tmp = None
                    if pair.frontHasNext():
                        poly3 = self.poly
                        idx6 = i
                        idx7 = idx6
                        len3 = len(poly3)
                        if (idx7 < 0):
                            idx7 = (idx7 + len3)
                        idx6 = HxOverrides.mod(idx7, len3)
                        p1 = (poly3[idx6] if idx6 >= 0 and idx6 < len(poly3) else None)
                        poly4 = self.poly
                        idx8 = j
                        idx9 = idx8
                        len4 = len(poly4)
                        if (idx9 < 0):
                            idx9 = (idx9 + len4)
                        idx8 = HxOverrides.mod(idx9, len4)
                        a1 = (poly4[idx8] if idx8 >= 0 and idx8 < len(poly4) else None)
                        poly5 = self.poly
                        idx10 = pair.frontPeekNext()
                        idx11 = idx10
                        len5 = len(poly5)
                        if (idx11 < 0):
                            idx11 = (idx11 + len5)
                        idx10 = HxOverrides.mod(idx11, len5)
                        b1 = (poly5[idx10] if idx10 >= 0 and idx10 < len(poly5) else None)
                        tmp = (not ((((((a1.x - p1.x)) * ((b1.y - p1.y))) - ((((b1.x - p1.x)) *
                                                                              ((a1.y - p1.y))))) < 0)))
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    pair.popFront()
                tmp1 = None
                if (not pair.isFrontEmpty()):
                    poly6 = self.poly
                    idx12 = i
                    idx13 = idx12
                    len6 = len(poly6)
                    if (idx13 < 0):
                        idx13 = (idx13 + len6)
                    idx12 = HxOverrides.mod(idx13, len6)
                    p2 = (poly6[idx12] if idx12 >= 0 and idx12 < len(poly6) else None)
                    poly7 = self.poly
                    idx14 = k
                    idx15 = idx14
                    len7 = len(poly7)
                    if (idx15 < 0):
                        idx15 = (idx15 + len7)
                    idx14 = HxOverrides.mod(idx15, len7)
                    a2 = (poly7[idx14] if idx14 >= 0 and idx14 < len(poly7) else None)
                    poly8 = self.poly
                    idx16 = pair.backBottom()
                    idx17 = idx16
                    len8 = len(poly8)
                    if (idx17 < 0):
                        idx17 = (idx17 + len8)
                    idx16 = HxOverrides.mod(idx17, len8)
                    b2 = (poly8[idx16] if idx16 >= 0 and idx16 < len(poly8) else None)
                    tmp1 = (not ((((((a2.x - p2.x)) * ((b2.y - p2.y))) - ((((b2.x - p2.x)) * ((a2.y - p2.y))))) > 0)))
                else:
                    tmp1 = False
                if tmp1:
                    top = pair.backBottom()
                else:
                    w = (w + 1)
            else:
                w = (w + 1)
        self.update(i, k, w, j, top)

    def update(self, a, b, w, i, j):
        ow = self.subDecomp.weight(a, b)
        if (w <= ow):
            pair = self.subDecomp.pairs(a, b)
            if (w < ow):
                pair.flush()
                self.subDecomp.setWeight(a, b, w)
            pair.pushNarrow(i, j)

    def _decompByDiags(self, i, k, outIndices, level=None):
        if (level is None):
            level = 0
        if (level == 0):
            self._indicesSet.set(0, True)
            self._indicesSet.set((len(self.poly) - 1), True)
        j = None
        ijReal = True
        jkReal = True
        nDiags = 0
        if ((k - i) <= 1):
            return
        pair = self.subDecomp.pairs(i, k)
        if self.isReflex(i):
            j = pair.backTop()
            ijReal = (pair.frontBottom() == pair.backTop())
        else:
            j = pair.frontTop()
            jkReal = (pair.backBottom() == pair.frontTop())
        if ijReal:
            self._indicesSet.set(i, True)
            self._indicesSet.set(j, True)
            _this = self._diags
            _this.append(_hx_AnonObject({'_hx_from': i, 'to': j}))
            nDiags = (nDiags + 1)
        if jkReal:
            self._indicesSet.set(j, True)
            self._indicesSet.set(k, True)
            _this1 = self._diags
            _this1.append(_hx_AnonObject({'_hx_from': j, 'to': k}))
            nDiags = (nDiags + 1)
        _hx_local_2 = self
        _hx_local_3 = _hx_local_2.guard
        _hx_local_2.guard = (_hx_local_3 - 1)
        _hx_local_3
        if (nDiags > 1):
            _g = []
            k1 = self._indicesSet.keys()
            while k1.hasNext():
                k2 = k1.next()
                _g.append(k2)
            indices = _g
            indices.sort(key=python_lib_Functools.cmp_to_key(self.intCmp))
            if (len(indices) > 0):
                outIndices.append(indices)
                self._indicesSet = haxe_ds_IntMap()
        if (ijReal and (((j - i) > 1))):
            self._decompByDiags(j, k, outIndices, (level + 1))
            self._decompByDiags(i, j, outIndices, (level + 1))
        else:
            self._decompByDiags(i, j, outIndices, (level + 1))
            self._decompByDiags(j, k, outIndices, (level + 1))

    def intCmp(self, a, b):
        if (a == b):
            return 0
        elif (b < a):
            return 1
        else:
            return -1

    def decompIndices(self):
        res = list()
        self.guard = (3 * self.n)
        self._decompByDiags(0, (len(self.poly) - 1), res)
        hxGeomAlgo_SnoeyinkKeil.diagonals = self._diags
        return res

    def toString(self):
        _this = self.poly
        return ((Std.string(len(self.poly)) + ": ") + HxOverrides.stringOrNull(
            ((("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1, '') for x1 in _this]))) + "]"))))


class hxGeomAlgo_SubDecomp:
    _hx_class_name = "hxGeomAlgo.SubDecomp"
    __slots__ = ("wt", "pd", "rx")
    _hx_fields = ["wt", "pd", "rx"]
    _hx_methods = ["setWeight", "weight", "pairs", "init", "initWithWeight"]

    def __init__(self, reflex):
        n = len(reflex)
        r = 0
        self.rx = list()
        _g = 0
        _g1 = n
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            tmp = None
            if (reflex[i] if i >= 0 and i < len(reflex) else None):
                r = (r + 1)
                tmp = (r - 1)
            else:
                tmp = 0
            python_internal_ArrayImpl._set(self.rx, i, tmp)
        j = r
        self.wt = list()
        self.pd = list()
        _g2 = 0
        _g3 = n
        while (_g2 < _g3):
            i1 = _g2
            _g2 = (_g2 + 1)
            if (not (reflex[i1] if i1 >= 0 and i1 < len(reflex) else None)):
                tmp1 = j
                j = (j + 1)
                python_internal_ArrayImpl._set(self.rx, i1, tmp1)
            python_internal_ArrayImpl._set(self.wt, i1, list())
            python_internal_ArrayImpl._set(self.pd, i1, list())
            _g21 = 0
            _g31 = n
            while (_g21 < _g31):
                k = _g21
                _g21 = (_g21 + 1)
                if ((i1 < r) or ((k < r))):
                    python_internal_ArrayImpl._set((self.wt[i1] if i1 >= 0 and i1 < len(self.wt) else None), k,
                                                   hxGeomAlgo_DecompPoly.BAD)
                    python_internal_ArrayImpl._set((self.pd[i1] if i1 >= 0 and i1 < len(self.pd) else None), k, None)
                else:
                    break

    def setWeight(self, i, j, w):
        python_internal_ArrayImpl._set(
            python_internal_ArrayImpl._get(self.wt, (self.rx[i] if i >= 0 and i < len(self.rx) else None)),
            (self.rx[j] if j >= 0 and j < len(self.rx) else None), w)

    def weight(self, i, j):
        return python_internal_ArrayImpl._get(
            python_internal_ArrayImpl._get(self.wt, (self.rx[i] if i >= 0 and i < len(self.rx) else None)),
            (self.rx[j] if j >= 0 and j < len(self.rx) else None))

    def pairs(self, i, j):
        return python_internal_ArrayImpl._get(
            python_internal_ArrayImpl._get(self.pd, (self.rx[i] if i >= 0 and i < len(self.rx) else None)),
            (self.rx[j] if j >= 0 and j < len(self.rx) else None))

    def init(self, i, j):
        def _hx_local_1():
            def _hx_local_0():
                python_internal_ArrayImpl._set(
                    python_internal_ArrayImpl._get(self.pd, (self.rx[i] if i >= 0 and i < len(self.rx) else None)),
                    (self.rx[j] if j >= 0 and j < len(self.rx) else None), hxGeomAlgo_PairDeque())
                return python_internal_ArrayImpl._get(
                    python_internal_ArrayImpl._get(self.pd, (self.rx[i] if i >= 0 and i < len(self.rx) else None)),
                    (self.rx[j] if j >= 0 and j < len(self.rx) else None))

            return _hx_local_0()

        return _hx_local_1()

    def initWithWeight(self, i, j, w, a, b):
        self.setWeight(i, j, w)
        self.init(i, j).push(a, b)


class hxGeomAlgo_VertexType(Enum):
    __slots__ = ()
    _hx_class_name = "hxGeomAlgo.VertexType"


hxGeomAlgo_VertexType.UNKNOWN = hxGeomAlgo_VertexType("UNKNOWN", 0, ())
hxGeomAlgo_VertexType.RIGHT_LID = hxGeomAlgo_VertexType("RIGHT_LID", 1, ())
hxGeomAlgo_VertexType.LEFT_LID = hxGeomAlgo_VertexType("LEFT_LID", 2, ())
hxGeomAlgo_VertexType.RIGHT_WALL = hxGeomAlgo_VertexType("RIGHT_WALL", 3, ())
hxGeomAlgo_VertexType.LEFT_WALL = hxGeomAlgo_VertexType("LEFT_WALL", 4, ())


class hxGeomAlgo_Visibility:
    _hx_class_name = "hxGeomAlgo.Visibility"
    __slots__ = ()
    _hx_statics = [
        "NOT_SAVED", "origPoint", "stack", "vertexType", "stackTop", "poly", "leftLidIdx", "rightLidIdx", "reversed",
        "getVisibleIndicesFrom", "getVisiblePolyFrom", "exitRightBay", "exitLeftBay", "push", "saveLid", "restoreLid"
    ]
    origPoint = None
    stackTop = None
    poly = None
    leftLidIdx = None
    rightLidIdx = None
    reversed = None

    @staticmethod
    def getVisibleIndicesFrom(simplePoly, origIdx=None):
        if (origIdx is None):
            origIdx = 0
        res = list()
        hxGeomAlgo_Visibility.poly = list()
        hxGeomAlgo_Visibility.stack = []
        hxGeomAlgo_Visibility.vertexType = []
        if (len(simplePoly) <= 0):
            return res
        hxGeomAlgo_Visibility.stackTop = -1
        _g = 0
        _g1 = len(simplePoly)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            _this = hxGeomAlgo_Visibility.poly
            x = hxGeomAlgo__HxPoint_HxPoint_Impl_._new((simplePoly[i] if i >= 0 and i < len(simplePoly) else None).x,
                                                       (simplePoly[i] if i >= 0 and i < len(simplePoly) else None).y)
            _this.append(x)
            _this1 = hxGeomAlgo_Visibility.stack
            _this1.append(-1)
            _this2 = hxGeomAlgo_Visibility.vertexType
            _this2.append(hxGeomAlgo_VertexType.UNKNOWN)
        hxGeomAlgo_Visibility.reversed = hxGeomAlgo_PolyTools.makeCW(hxGeomAlgo_Visibility.poly)
        if hxGeomAlgo_Visibility.reversed:
            origIdx = ((len(hxGeomAlgo_Visibility.poly) - origIdx) - 1)
        edgeJ = None
        hxGeomAlgo_Visibility.origPoint = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.poly, origIdx)
        j = origIdx
        tmp = j
        j = (j + 1)
        hxGeomAlgo_Visibility.push(tmp, hxGeomAlgo_VertexType.RIGHT_WALL)
        while True:
            tmp1 = j
            j = (j + 1)
            hxGeomAlgo_Visibility.push(tmp1, hxGeomAlgo_VertexType.RIGHT_WALL)
            if (j >= ((len(hxGeomAlgo_Visibility.poly) + origIdx))):
                break
            poly = hxGeomAlgo_Visibility.poly
            idx = (j - 1)
            idx1 = idx
            _hx_len = len(poly)
            if (idx1 < 0):
                idx1 = (idx1 + _hx_len)
            idx = HxOverrides.mod(idx1, _hx_len)
            poly1 = hxGeomAlgo_Visibility.poly
            idx2 = j
            idx3 = idx2
            len1 = len(poly1)
            if (idx3 < 0):
                idx3 = (idx3 + len1)
            idx2 = HxOverrides.mod(idx3, len1)
            edgeJ = hxGeomAlgo_PolyTools.meet((poly[idx] if idx >= 0 and idx < len(poly) else None),
                                              (poly1[idx2] if idx2 >= 0 and idx2 < len(poly1) else None))
            if edgeJ.left(hxGeomAlgo_Visibility.origPoint):
                if (not ((j < ((len(hxGeomAlgo_Visibility.poly) + origIdx))))):
                    break
                else:
                    continue
            poly2 = hxGeomAlgo_Visibility.poly
            idx4 = (j - 2)
            idx5 = idx4
            len2 = len(poly2)
            if (idx5 < 0):
                idx5 = (idx5 + len2)
            idx4 = HxOverrides.mod(idx5, len2)
            if (not edgeJ.left((poly2[idx4] if idx4 >= 0 and idx4 < len(poly2) else None))):
                poly3 = hxGeomAlgo_Visibility.poly
                idx6 = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack, hxGeomAlgo_Visibility.stackTop)
                idx7 = idx6
                len3 = len(poly3)
                if (idx7 < 0):
                    idx7 = (idx7 + len3)
                idx6 = HxOverrides.mod(idx7, len3)
                j = hxGeomAlgo_Visibility.exitRightBay(hxGeomAlgo_Visibility.poly, j,
                                                       (poly3[idx6] if idx6 >= 0 and idx6 < len(poly3) else None),
                                                       hxGeomAlgo_HomogCoord.INFINITY)
                tmp2 = j
                j = (j + 1)
                hxGeomAlgo_Visibility.push(tmp2, hxGeomAlgo_VertexType.RIGHT_LID)
                if (not ((j < ((len(hxGeomAlgo_Visibility.poly) + origIdx))))):
                    break
                else:
                    continue
            hxGeomAlgo_Visibility.saveLid()
            while True:
                p = hxGeomAlgo_Visibility.origPoint
                poly4 = hxGeomAlgo_Visibility.poly
                idx8 = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack, hxGeomAlgo_Visibility.stackTop)
                idx9 = idx8
                len4 = len(poly4)
                if (idx9 < 0):
                    idx9 = (idx9 + len4)
                idx8 = HxOverrides.mod(idx9, len4)
                a = (poly4[idx8] if idx8 >= 0 and idx8 < len(poly4) else None)
                poly5 = hxGeomAlgo_Visibility.poly
                idx10 = j
                idx11 = idx10
                len5 = len(poly5)
                if (idx11 < 0):
                    idx11 = (idx11 + len5)
                idx10 = HxOverrides.mod(idx11, len5)
                b = (poly5[idx10] if idx10 >= 0 and idx10 < len(poly5) else None)
                if (((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y))))) > 0):
                    poly6 = hxGeomAlgo_Visibility.poly
                    idx12 = j
                    idx13 = idx12
                    len6 = len(poly6)
                    if (idx13 < 0):
                        idx13 = (idx13 + len6)
                    idx12 = HxOverrides.mod(idx13, len6)
                    p1 = (poly6[idx12] if idx12 >= 0 and idx12 < len(poly6) else None)
                    poly7 = hxGeomAlgo_Visibility.poly
                    idx14 = (j + 1)
                    idx15 = idx14
                    len7 = len(poly7)
                    if (idx15 < 0):
                        idx15 = (idx15 + len7)
                    idx14 = HxOverrides.mod(idx15, len7)
                    a1 = (poly7[idx14] if idx14 >= 0 and idx14 < len(poly7) else None)
                    b1 = hxGeomAlgo_Visibility.origPoint
                    if (((((a1.x - p1.x)) * ((b1.y - p1.y))) - ((((b1.x - p1.x)) * ((a1.y - p1.y))))) < 0):
                        j = (j + 1)
                    else:
                        poly8 = hxGeomAlgo_Visibility.poly
                        idx16 = (j + 1)
                        idx17 = idx16
                        len8 = len(poly8)
                        if (idx17 < 0):
                            idx17 = (idx17 + len8)
                        idx16 = HxOverrides.mod(idx17, len8)
                        if edgeJ.left((poly8[idx16] if idx16 >= 0 and idx16 < len(poly8) else None)):
                            poly9 = hxGeomAlgo_Visibility.poly
                            idx18 = j
                            idx19 = idx18
                            len9 = len(poly9)
                            if (idx19 < 0):
                                idx19 = (idx19 + len9)
                            idx18 = HxOverrides.mod(idx19, len9)
                            poly10 = hxGeomAlgo_Visibility.poly
                            idx20 = hxGeomAlgo_Visibility.leftLidIdx
                            idx21 = idx20
                            len10 = len(poly10)
                            if (idx21 < 0):
                                idx21 = (idx21 + len10)
                            idx20 = HxOverrides.mod(idx21, len10)
                            poly11 = hxGeomAlgo_Visibility.poly
                            idx22 = (hxGeomAlgo_Visibility.leftLidIdx - 1)
                            idx23 = idx22
                            len11 = len(poly11)
                            if (idx23 < 0):
                                idx23 = (idx23 + len11)
                            idx22 = HxOverrides.mod(idx23, len11)
                            j = (hxGeomAlgo_Visibility.exitLeftBay(
                                hxGeomAlgo_Visibility.poly, j,
                                (poly9[idx18] if idx18 >= 0 and idx18 < len(poly9) else None),
                                hxGeomAlgo_PolyTools.meet(
                                    (poly10[idx20] if idx20 >= 0 and idx20 < len(poly10) else None),
                                    (poly11[idx22] if idx22 >= 0 and idx22 < len(poly11) else None))) + 1)
                        else:
                            hxGeomAlgo_Visibility.restoreLid()
                            tmp3 = j
                            j = (j + 1)
                            hxGeomAlgo_Visibility.push(tmp3, hxGeomAlgo_VertexType.LEFT_WALL)
                            break
                    poly12 = hxGeomAlgo_Visibility.poly
                    idx24 = (j - 1)
                    idx25 = idx24
                    len12 = len(poly12)
                    if (idx25 < 0):
                        idx25 = (idx25 + len12)
                    idx24 = HxOverrides.mod(idx25, len12)
                    poly13 = hxGeomAlgo_Visibility.poly
                    idx26 = j
                    idx27 = idx26
                    len13 = len(poly13)
                    if (idx27 < 0):
                        idx27 = (idx27 + len13)
                    idx26 = HxOverrides.mod(idx27, len13)
                    edgeJ = hxGeomAlgo_PolyTools.meet((poly12[idx24] if idx24 >= 0 and idx24 < len(poly12) else None),
                                                      (poly13[idx26] if idx26 >= 0 and idx26 < len(poly13) else None))
                else:
                    poly14 = hxGeomAlgo_Visibility.poly
                    idx28 = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack, hxGeomAlgo_Visibility.stackTop)
                    idx29 = idx28
                    len14 = len(poly14)
                    if (idx29 < 0):
                        idx29 = (idx29 + len14)
                    idx28 = HxOverrides.mod(idx29, len14)
                    if (not edgeJ.left((poly14[idx28] if idx28 >= 0 and idx28 < len(poly14) else None))):
                        poly15 = hxGeomAlgo_Visibility.poly
                        idx30 = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack,
                                                               hxGeomAlgo_Visibility.stackTop)
                        idx31 = idx30
                        len15 = len(poly15)
                        if (idx31 < 0):
                            idx31 = (idx31 + len15)
                        idx30 = HxOverrides.mod(idx31, len15)
                        j = hxGeomAlgo_Visibility.exitRightBay(
                            hxGeomAlgo_Visibility.poly, j,
                            (poly15[idx30] if idx30 >= 0 and idx30 < len(poly15) else None), edgeJ.neg())
                        tmp4 = j
                        j = (j + 1)
                        hxGeomAlgo_Visibility.push(tmp4, hxGeomAlgo_VertexType.RIGHT_LID)
                        break
                    else:
                        hxGeomAlgo_Visibility.saveLid()
            if (not ((j < ((len(hxGeomAlgo_Visibility.poly) + origIdx))))):
                break
        _g2 = 0
        _g3 = (hxGeomAlgo_Visibility.stackTop + 1)
        while (_g2 < _g3):
            i1 = _g2
            _g2 = (_g2 + 1)
            if ((python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.vertexType, i1)
                 == hxGeomAlgo_VertexType.LEFT_WALL) or ((python_internal_ArrayImpl._get(
                     hxGeomAlgo_Visibility.vertexType, i1) == hxGeomAlgo_VertexType.RIGHT_WALL))):
                idx32 = HxOverrides.mod(python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack, i1),
                                        len(hxGeomAlgo_Visibility.poly))
                if hxGeomAlgo_Visibility.reversed:
                    idx32 = ((len(hxGeomAlgo_Visibility.poly) - idx32) - 1)
                res.append(idx32)
        return res

    @staticmethod
    def getVisiblePolyFrom(simplePoly, origIdx=None):
        if (origIdx is None):
            origIdx = 0
        indices = hxGeomAlgo_Visibility.getVisibleIndicesFrom(simplePoly, origIdx)
        res = list()
        if (len(indices) <= 0):
            return res
        q = None
        poly = hxGeomAlgo_Visibility.poly
        idx = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack, hxGeomAlgo_Visibility.stackTop)
        idx1 = idx
        _hx_len = len(poly)
        if (idx1 < 0):
            idx1 = (idx1 + _hx_len)
        idx = HxOverrides.mod(idx1, _hx_len)
        last = (poly[idx] if idx >= 0 and idx < len(poly) else None)
        lastPushed = None
        lastType = hxGeomAlgo_VertexType.UNKNOWN
        vType = hxGeomAlgo_VertexType.UNKNOWN
        _g = 0
        _g1 = (hxGeomAlgo_Visibility.stackTop + 1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            vType = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.vertexType, i)
            if (vType == hxGeomAlgo_VertexType.RIGHT_LID):
                q1 = hxGeomAlgo_PolyTools.meet(hxGeomAlgo_Visibility.origPoint, last)
                poly1 = hxGeomAlgo_Visibility.poly
                idx2 = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack, i)
                idx3 = idx2
                len1 = len(poly1)
                if (idx3 < 0):
                    idx3 = (idx3 + len1)
                idx2 = HxOverrides.mod(idx3, len1)
                poly2 = hxGeomAlgo_Visibility.poly
                idx4 = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack, (i + 1))
                idx5 = idx4
                len2 = len(poly2)
                if (idx5 < 0):
                    idx5 = (idx5 + len2)
                idx4 = HxOverrides.mod(idx5, len2)
                q = q1.meet(
                    hxGeomAlgo_PolyTools.meet((poly1[idx2] if idx2 >= 0 and idx2 < len(poly1) else None),
                                              (poly2[idx4] if idx4 >= 0 and idx4 < len(poly2) else None)))
                if ((lastPushed is not None) and (not ((((last is not None) and ((lastPushed.x == last.x))) and
                                                        ((lastPushed.y == last.y)))))):
                    x = hxGeomAlgo__HxPoint_HxPoint_Impl_._new(last.x, last.y)
                    res.append(x)
                x1 = q.toPoint()
                res.append(x1)
            elif (vType == hxGeomAlgo_VertexType.LEFT_WALL):
                poly3 = hxGeomAlgo_Visibility.poly
                idx6 = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack, i)
                idx7 = idx6
                len3 = len(poly3)
                if (idx7 < 0):
                    idx7 = (idx7 + len3)
                idx6 = HxOverrides.mod(idx7, len3)
                q2 = hxGeomAlgo_PolyTools.meet(hxGeomAlgo_Visibility.origPoint,
                                               (poly3[idx6] if idx6 >= 0 and idx6 < len(poly3) else None))
                poly4 = hxGeomAlgo_Visibility.poly
                idx8 = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack, (i - 2))
                idx9 = idx8
                len4 = len(poly4)
                if (idx9 < 0):
                    idx9 = (idx9 + len4)
                idx8 = HxOverrides.mod(idx9, len4)
                poly5 = hxGeomAlgo_Visibility.poly
                idx10 = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack, (i - 1))
                idx11 = idx10
                len5 = len(poly5)
                if (idx11 < 0):
                    idx11 = (idx11 + len5)
                idx10 = HxOverrides.mod(idx11, len5)
                q = q2.meet(
                    hxGeomAlgo_PolyTools.meet((poly4[idx8] if idx8 >= 0 and idx8 < len(poly4) else None),
                                              (poly5[idx10] if idx10 >= 0 and idx10 < len(poly5) else None)))
                x2 = q.toPoint()
                res.append(x2)
            elif (not ((((vType == hxGeomAlgo_VertexType.RIGHT_WALL) and
                         ((lastType == hxGeomAlgo_VertexType.RIGHT_LID))) or
                        (((vType == hxGeomAlgo_VertexType.LEFT_LID) and
                          ((lastType == hxGeomAlgo_VertexType.RIGHT_LID))))))):
                x3 = hxGeomAlgo__HxPoint_HxPoint_Impl_._new(last.x, last.y)
                res.append(x3)
            lastPushed = python_internal_ArrayImpl._get(res, (len(res) - 1))
            poly6 = hxGeomAlgo_Visibility.poly
            idx12 = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack, i)
            idx13 = idx12
            len6 = len(poly6)
            if (idx13 < 0):
                idx13 = (idx13 + len6)
            idx12 = HxOverrides.mod(idx13, len6)
            last = (poly6[idx12] if idx12 >= 0 and idx12 < len(poly6) else None)
            lastType = vType
        return res

    @staticmethod
    def exitRightBay(poly, j, bot, lid):
        windingNum = 0
        mouth = hxGeomAlgo_PolyTools.meet(hxGeomAlgo_Visibility.origPoint, bot)
        lastLeft = None
        currLeft = False
        while True:
            j = (j + 1)
            tmp = j
            if (not ((tmp < ((3 * len(poly)))))):
                break
            lastLeft = currLeft
            idx = j
            idx1 = idx
            _hx_len = len(poly)
            if (idx1 < 0):
                idx1 = (idx1 + _hx_len)
            idx = HxOverrides.mod(idx1, _hx_len)
            currLeft = mouth.left((poly[idx] if idx >= 0 and idx < len(poly) else None))
            tmp1 = None
            if (currLeft != lastLeft):
                idx2 = (j - 1)
                idx3 = idx2
                len1 = len(poly)
                if (idx3 < 0):
                    idx3 = (idx3 + len1)
                idx2 = HxOverrides.mod(idx3, len1)
                p = (poly[idx2] if idx2 >= 0 and idx2 < len(poly) else None)
                idx4 = j
                idx5 = idx4
                len2 = len(poly)
                if (idx5 < 0):
                    idx5 = (idx5 + len2)
                idx4 = HxOverrides.mod(idx5, len2)
                a = (poly[idx4] if idx4 >= 0 and idx4 < len(poly) else None)
                b = hxGeomAlgo_Visibility.origPoint
                tmp1 = ((((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y))))) > 0) == currLeft)
            else:
                tmp1 = False
            if tmp1:
                if (not currLeft):
                    windingNum = (windingNum - 1)
                else:
                    tmp2 = windingNum
                    windingNum = (windingNum + 1)
                    if (tmp2 == 0):
                        idx6 = (j - 1)
                        idx7 = idx6
                        len3 = len(poly)
                        if (idx7 < 0):
                            idx7 = (idx7 + len3)
                        idx6 = HxOverrides.mod(idx7, len3)
                        idx8 = j
                        idx9 = idx8
                        len4 = len(poly)
                        if (idx9 < 0):
                            idx9 = (idx9 + len4)
                        idx8 = HxOverrides.mod(idx9, len4)
                        edge = hxGeomAlgo_PolyTools.meet((poly[idx6] if idx6 >= 0 and idx6 < len(poly) else None),
                                                         (poly[idx8] if idx8 >= 0 and idx8 < len(poly) else None))
                        if (edge.left(bot) and (not hxGeomAlgo_HomogCoord.cw(mouth, edge, lid))):
                            return (j - 1)
        message = ((((("ERROR: We never exited RBay " + HxOverrides.stringOrNull(
            ((((("(" + Std.string(bot.x)) + ", ") + Std.string(bot.y)) + ")")))) + " ") + Std.string(lid)) + " ") +
                   Std.string(windingNum))
        return j

    @staticmethod
    def exitLeftBay(poly, j, bot, lid):
        windingNum = 0
        mouth = hxGeomAlgo_PolyTools.meet(hxGeomAlgo_Visibility.origPoint, bot)
        lastRight = None
        currRight = False
        while True:
            j = (j + 1)
            tmp = j
            if (not ((tmp < ((3 * len(poly)))))):
                break
            lastRight = currRight
            idx = j
            idx1 = idx
            _hx_len = len(poly)
            if (idx1 < 0):
                idx1 = (idx1 + _hx_len)
            idx = HxOverrides.mod(idx1, _hx_len)
            currRight = mouth.right((poly[idx] if idx >= 0 and idx < len(poly) else None))
            tmp1 = None
            if (currRight != lastRight):
                idx2 = (j - 1)
                idx3 = idx2
                len1 = len(poly)
                if (idx3 < 0):
                    idx3 = (idx3 + len1)
                idx2 = HxOverrides.mod(idx3, len1)
                p = (poly[idx2] if idx2 >= 0 and idx2 < len(poly) else None)
                idx4 = j
                idx5 = idx4
                len2 = len(poly)
                if (idx5 < 0):
                    idx5 = (idx5 + len2)
                idx4 = HxOverrides.mod(idx5, len2)
                a = (poly[idx4] if idx4 >= 0 and idx4 < len(poly) else None)
                b = hxGeomAlgo_Visibility.origPoint
                tmp1 = ((((((a.x - p.x)) * ((b.y - p.y))) - ((((b.x - p.x)) * ((a.y - p.y))))) < 0) == currRight)
            else:
                tmp1 = False
            if tmp1:
                if (not currRight):
                    windingNum = (windingNum + 1)
                else:
                    tmp2 = windingNum
                    windingNum = (windingNum - 1)
                    if (tmp2 == 0):
                        idx6 = (j - 1)
                        idx7 = idx6
                        len3 = len(poly)
                        if (idx7 < 0):
                            idx7 = (idx7 + len3)
                        idx6 = HxOverrides.mod(idx7, len3)
                        idx8 = j
                        idx9 = idx8
                        len4 = len(poly)
                        if (idx9 < 0):
                            idx9 = (idx9 + len4)
                        idx8 = HxOverrides.mod(idx9, len4)
                        edge = hxGeomAlgo_PolyTools.meet((poly[idx6] if idx6 >= 0 and idx6 < len(poly) else None),
                                                         (poly[idx8] if idx8 >= 0 and idx8 < len(poly) else None))
                        if (edge.right(bot) and (not hxGeomAlgo_HomogCoord.cw(mouth, edge, lid))):
                            return (j - 1)
        message = ((((("ERROR: We never exited LBay " + HxOverrides.stringOrNull(
            ((((("(" + Std.string(bot.x)) + ", ") + Std.string(bot.y)) + ")")))) + " ") + Std.string(lid)) + " ") +
                   Std.string(windingNum))
        return j

    @staticmethod
    def push(idx, vType):
        _hx_local_0 = hxGeomAlgo_Visibility
        _hx_local_1 = _hx_local_0.stackTop
        _hx_local_0.stackTop = (_hx_local_1 + 1)
        _hx_local_1
        python_internal_ArrayImpl._set(hxGeomAlgo_Visibility.stack, hxGeomAlgo_Visibility.stackTop, idx)
        python_internal_ArrayImpl._set(hxGeomAlgo_Visibility.vertexType, hxGeomAlgo_Visibility.stackTop, vType)

    @staticmethod
    def saveLid():
        if (python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.vertexType,
                                           hxGeomAlgo_Visibility.stackTop) == hxGeomAlgo_VertexType.LEFT_WALL):
            _hx_local_0 = hxGeomAlgo_Visibility
            _hx_local_1 = _hx_local_0.stackTop
            _hx_local_0.stackTop = (_hx_local_1 - 1)
            _hx_local_1

        def _hx_local_4():
            _hx_local_2 = hxGeomAlgo_Visibility
            _hx_local_3 = _hx_local_2.stackTop
            _hx_local_2.stackTop = (_hx_local_3 - 1)
            return _hx_local_3

        hxGeomAlgo_Visibility.leftLidIdx = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack, _hx_local_4())
        if (python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.vertexType,
                                           hxGeomAlgo_Visibility.stackTop) == hxGeomAlgo_VertexType.RIGHT_LID):

            def _hx_local_7():
                _hx_local_5 = hxGeomAlgo_Visibility
                _hx_local_6 = _hx_local_5.stackTop
                _hx_local_5.stackTop = (_hx_local_6 - 1)
                return _hx_local_6

            hxGeomAlgo_Visibility.rightLidIdx = python_internal_ArrayImpl._get(hxGeomAlgo_Visibility.stack,
                                                                               _hx_local_7())
        else:
            hxGeomAlgo_Visibility.rightLidIdx = -1

    @staticmethod
    def restoreLid():
        if (hxGeomAlgo_Visibility.rightLidIdx != -1):
            hxGeomAlgo_Visibility.push(hxGeomAlgo_Visibility.rightLidIdx, hxGeomAlgo_VertexType.RIGHT_LID)
        hxGeomAlgo_Visibility.push(hxGeomAlgo_Visibility.leftLidIdx, hxGeomAlgo_VertexType.LEFT_LID)


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = [
        "keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass",
        "getClassFields", "prefixLength", "unhandleKeywords"
    ]

    @staticmethod
    def toString1(o, s):
        if (o is None):
            return "null"
        if isinstance(o, str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o, bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o, int) and (not isinstance(o, bool))):
            return str(o)
        if isinstance(o, float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                return str(o)
        if isinstance(o, list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(
                    ((("null" if prefix is None else prefix) +
                      HxOverrides.stringOrNull(python_Boot.toString1(
                          (o1[i] if i >= 0 and i < len(o1) else None), s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o, "toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e
            pass
        if hasattr(o, "__class__"):
            if isinstance(o, _hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(
                            python_Boot.toString1(python_Boot.simpleField(o, f),
                                                  (("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o, Enum):
                o2 = o
                l1 = len(o2.params)
                hasParams = (l1 > 0)
                if hasParams:
                    paramsStr = ""
                    _g3 = 0
                    _g12 = l1
                    while (_g3 < _g12):
                        i1 = _g3
                        _g3 = (_g3 + 1)
                        prefix1 = ""
                        if (i1 > 0):
                            prefix1 = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(
                            ((("null" if prefix1 is None else prefix1) +
                              HxOverrides.stringOrNull(python_Boot.toString1(o2.params[i1], s))))))
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) +
                            ")")
                else:
                    return o2.tag
            if hasattr(o, "_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields1 = python_Boot.getInstanceFields(o)
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(
                            python_Boot.toString1(python_Boot.simpleField(o, f1),
                                                  (("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") +
                               HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    return toStr1
                else:
                    fields2 = python_Boot.getClassFields(o)
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(
                            python_Boot.toString1(python_Boot.simpleField(o, f2),
                                                  (("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") +
                               HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    return toStr2
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o, "__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                pass
            if hasattr(o, "__str__"):
                return o.__str__([])
            if hasattr(o, "__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o, "_hx_fields"):
                fields = o._hx_fields
                if (fields is not None):
                    return list(fields)
            if isinstance(o, _hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    if (k != '_hx_disable_getattr'):
                        a.append(handler(k))
            elif hasattr(o, "__dict__"):
                d1 = o.__dict__
                keys1 = d1.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o, field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                  (("_hx_" + field) if
                   (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                     ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o, field1):
            return getattr(o, field1)
        else:
            return None

    @staticmethod
    def field(o, field):
        if (field is None):
            return None
        if isinstance(o, str):
            field1 = field
            _hx_local_0 = len(field1)
            if (_hx_local_0 == 10):
                if (field1 == "charCodeAt"):
                    return python_internal_MethodClosure(o, HxString.charCodeAt)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field2) if (hasattr(o, field2)) else None)
            elif (_hx_local_0 == 11):
                if (field1 == "lastIndexOf"):
                    return python_internal_MethodClosure(o, HxString.lastIndexOf)
                elif (field1 == "toLowerCase"):
                    return python_internal_MethodClosure(o, HxString.toLowerCase)
                elif (field1 == "toUpperCase"):
                    return python_internal_MethodClosure(o, HxString.toUpperCase)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field2) if (hasattr(o, field2)) else None)
            elif (_hx_local_0 == 9):
                if (field1 == "substring"):
                    return python_internal_MethodClosure(o, HxString.substring)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field2) if (hasattr(o, field2)) else None)
            elif (_hx_local_0 == 5):
                if (field1 == "split"):
                    return python_internal_MethodClosure(o, HxString.split)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field2) if (hasattr(o, field2)) else None)
            elif (_hx_local_0 == 7):
                if (field1 == "indexOf"):
                    return python_internal_MethodClosure(o, HxString.indexOf)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field2) if (hasattr(o, field2)) else None)
            elif (_hx_local_0 == 8):
                if (field1 == "toString"):
                    return python_internal_MethodClosure(o, HxString.toString)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field2) if (hasattr(o, field2)) else None)
            elif (_hx_local_0 == 6):
                if (field1 == "charAt"):
                    return python_internal_MethodClosure(o, HxString.charAt)
                elif (field1 == "length"):
                    return len(o)
                elif (field1 == "substr"):
                    return python_internal_MethodClosure(o, HxString.substr)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field2) if (hasattr(o, field2)) else None)
            else:
                field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                          (("_hx_" + field) if
                           (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                             ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o, field2) if (hasattr(o, field2)) else None)
        elif isinstance(o, list):
            field3 = field
            _hx_local_1 = len(field3)
            if (_hx_local_1 == 11):
                if (field3 == "lastIndexOf"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.lastIndexOf)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field4) if (hasattr(o, field4)) else None)
            elif (_hx_local_1 == 4):
                if (field3 == "copy"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.copy)
                elif (field3 == "join"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.join)
                elif (field3 == "push"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.push)
                elif (field3 == "sort"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.sort)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field4) if (hasattr(o, field4)) else None)
            elif (_hx_local_1 == 5):
                if (field3 == "shift"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.shift)
                elif (field3 == "slice"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.slice)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field4) if (hasattr(o, field4)) else None)
            elif (_hx_local_1 == 7):
                if (field3 == "indexOf"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.indexOf)
                elif (field3 == "reverse"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.reverse)
                elif (field3 == "unshift"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.unshift)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field4) if (hasattr(o, field4)) else None)
            elif (_hx_local_1 == 3):
                if (field3 == "map"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.map)
                elif (field3 == "pop"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.pop)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field4) if (hasattr(o, field4)) else None)
            elif (_hx_local_1 == 8):
                if (field3 == "iterator"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.iterator)
                elif (field3 == "toString"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.toString)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field4) if (hasattr(o, field4)) else None)
            elif (_hx_local_1 == 6):
                if (field3 == "concat"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.concat)
                elif (field3 == "filter"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.filter)
                elif (field3 == "insert"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.insert)
                elif (field3 == "length"):
                    return len(o)
                elif (field3 == "remove"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.remove)
                elif (field3 == "splice"):
                    return python_internal_MethodClosure(o, python_internal_ArrayImpl.splice)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                              (("_hx_" + field) if
                               (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                                 ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o, field4) if (hasattr(o, field4)) else None)
            else:
                field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                          (("_hx_" + field) if
                           (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                             ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o, field4) if (hasattr(o, field4)) else None)
        else:
            field5 = (("_hx_" + field) if ((field in python_Boot.keywords)) else
                      (("_hx_" + field) if
                       (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and
                         ((ord(field[(len(field) - 1)]) != 95)))) else field))
            return (getattr(o, field5) if (hasattr(o, field5)) else None)

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c, "_hx_fields")) else [])
        if hasattr(c, "_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c, "_hx_super"):
                return c._hx_super
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c, "_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name, 0, python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name, python_Boot.prefixLength, None)
            if (real in python_Boot.keywords):
                return real
        return name


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = [
        "concat", "copy", "iterator", "indexOf", "lastIndexOf", "join", "toString", "pop", "push", "unshift", "remove",
        "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get", "_set"
    ]

    @staticmethod
    def concat(a1, a2):
        return (a1 + a2)

    @staticmethod
    def copy(x):
        return list(x)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a, x, fromIndex=None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g = l
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if HxOverrides.eq(a[i], x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a, x, fromIndex=None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else
                                                    (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if HxOverrides.eq(a[l], x):
                return l
        return -1

    @staticmethod
    def join(x, sep):
        return sep.join([python_Boot.toString1(x1, '') for x1 in x])

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1, '') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x, e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x, e):
        x.insert(0, e)

    @staticmethod
    def remove(x, e):
        try:
            x.remove(e)
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x, pos, end=None):
        return x[pos:end]

    @staticmethod
    def sort(x, f):
        x.sort(key=python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x, pos, _hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x, f):
        return list(map(f, x))

    @staticmethod
    def filter(x, f):
        return list(filter(f, x))

    @staticmethod
    def insert(a, pos, x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x, idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None

    @staticmethod
    def _set(x, idx, v):
        l = len(x)
        while (l < idx):
            x.append(None)
            l = (l + 1)
        if (l == idx):
            x.append(v)
        else:
            x[idx] = v
        return v


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "modf", "mod"]

    @staticmethod
    def eq(a, b):
        if (isinstance(a, list) or isinstance(b, list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def modf(a, b):
        if (b == 0.0):
            return float('nan')
        elif (a < 0):
            if (b < 0):
                return -(-a % (-b))
            else:
                return -(-a % b)
        elif (b < 0):
            return a % (-b)
        else:
            return a % b

    @staticmethod
    def mod(a, b):
        if (a < 0):
            if (b < 0):
                return -(-a % (-b))
            else:
                return -(-a % b)
        elif (b < 0):
            return a % (-b)
        else:
            return a % b


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self, obj, func):
        self.obj = obj
        self.func = func

    def __call__(self, *args):
        return self.func(self.obj, *args)


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = [
        "split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString",
        "substring", "substr"
    ]

    @staticmethod
    def split(s, d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s, index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s, index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s, _hx_str, startIndex=None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0, ((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s, _hx_str, startIndex=None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s, startIndex, endIndex=None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s, startIndex, _hx_len=None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]


Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

hxGeomAlgo_HomogCoord.INFINITY = hxGeomAlgo_HomogCoord()
hxGeomAlgo__HxPoint_HxPoint_Impl_.EMPTY = hxGeomAlgo__HxPoint_HxPoint_Impl_._new(Math.NaN, Math.NaN)
hxGeomAlgo_PolyTools.point = hxGeomAlgo__HxPoint_HxPoint_Impl_._new()
hxGeomAlgo_PolyTools.zero = hxGeomAlgo__HxPoint_HxPoint_Impl_._new(0, 0)
hxGeomAlgo_PolyTools.EPSILON = .00000001
hxGeomAlgo_DecompPoly.INFINITY = 100000
hxGeomAlgo_DecompPoly.BAD = 999990
hxGeomAlgo_DecompPoly.NONE = 0
hxGeomAlgo_Visibility.NOT_SAVED = -1
hxGeomAlgo_Visibility.stack = list()
hxGeomAlgo_Visibility.vertexType = list()
python_Boot.keywords = set([
    "and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None",
    "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally",
    "is", "try", "def", "for", "lambda", "while"
])
python_Boot.prefixLength = len("_hx_")
